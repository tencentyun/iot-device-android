plugins {
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'


rootProject.ext.configPath = "./src/test/unit_test_config.json"
apply from: "../../parse_json.gradle"

buildConfig {
    packageName = 'unit.test'
    buildConfigField 'String', 'TESTBINDTIDDEVICE_PRODUCT_ID', "${getValueById('TESTBINDTIDDEVICE_PRODUCT_ID')}"
    buildConfigField 'String', 'TESTBINDTIDDEVICE_DEVICE_NAME', "${getValueById('TESTBINDTIDDEVICE_DEVICE_NAME')}"
    buildConfigField 'String', 'TESTBINDTIDDEVICE_TID', "${getValueById('TESTBINDTIDDEVICE_TID')}"
    buildConfigField 'String', 'TESTBINDTIDDEVICE_PEM_PUBKEY', "${getValueById('TESTBINDTIDDEVICE_PEM_PUBKEY')}"
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def libVersion = rootProject.ext.sdk.version
ext.isReleaseVersion = !libVersion.endsWith("SNAPSHOT")
publishing {
    publications {
        jar(MavenPublication) {
            groupId 'com.tencent.iot.hub'
            artifactId 'hub-device-java'
            version libVersion

            artifact(sourceJar)
            artifact(javadocJar)
            artifact file('build/libs/hub-device-java.jar')
            pom {
                name = 'hub device java'
                description = 'Hub Device Java library'
                url = 'https://github.com/tencentyun/iot-device-java/tree/master/hub/hub-device-java'
                licenses {
                    license {
                        name = 'Tencent Binary License'
                        url = 'https://github.com/tencentyun/iot-device-java/blob/master/hub/hub-device-android/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'tencent_archurtan'
                        name = 'Tencent archurtan'
                        email = 'archurtan@tencent.com'
                    }
                }
                scm {
                    url = 'scm:git@github.com:tencentyun/iot-device-java.git'
                    connection = 'scm:git@github.com:tencentyun/iot-device-java.git'
                    developerConnection = 'scm:git@github.com:tencentyun/iot-device-java.git'
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                    if (dp.version != "unspecified") {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dp.group)
                        dependencyNode.appendNode('artifactId', dp.name)
                        dependencyNode.appendNode('version', dp.version)

                        // for exclusions
                        if (dp.excludeRules.size() > 0) {
                            def exclusions = dependencyNode.appendNode('exclusions')
                            dp.excludeRules.each { ExcludeRule ex ->
                                def exclusion = exclusions.appendNode('exclusion')
                                exclusion.appendNode('groupId', ex.group)
                                exclusion.appendNode('artifactId', ex.module)
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = libVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("IOT_SONATYPE_USERNAME")
                password = System.getenv("IOT_SONATYPE_PASSWORD")
            }
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'log4j:log4j:1.2.17'
    implementation 'org.slf4j:slf4j-log4j12:1.8.0-beta0'
    implementation 'org.slf4j:slf4j-api:1.8.0-beta0'
    api "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${rootProject.ext.mqttJavaSdkVer}"
    implementation 'org.json:json:20190722'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.64'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.64'
    testImplementation 'junit:junit:4.13'
}

signing {
    if (isReleaseVersion) {
        sign publishing.publications.jar
    }
}

sourceCompatibility = "7"
targetCompatibility = "7"
